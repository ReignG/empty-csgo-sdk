#pragma once

namespace sdk {
    namespace interfaces {
        // https://github.com/pmrowla/hl2sdk-csgo/blob/master/public/cdll_int.h

        typedef void(*pfndemocustomdatacallback)(uint8_t* pdata, size_t isize);
        typedef struct inputcontexthandle_t__* inputcontexthandle_t;

        struct client_textmessage_t;
        struct model_t;
        struct frustum_t;

        class surfinfo;
        class imaterial;
        class csentence;
        class caudiosource;
        class audiostate_t;
        class ispatialquery;
        class imaterialsystem;
        class cphyscollide;
        class iachievementmgr;
        class inetchannelinfo;
        class ispsharedmemory;
        class cgamestatsdata;
        class keyvalues;
        class csteamapicontext;
        class vmatrix;
        class matrix3x4_t;

        class base_general;
        class collideable;

        typedef struct player_info_s {
            __int64         unknown;           
            union {
                __int64       steamID64;          
                struct {
                    __int32     xuidLow;
                    __int32     xuidHigh;
                };
            };
            char            szName[128];       
            int             userId;            
            char            szSteamID[20];      
            char            pad_0x00A8[0x10];   
            unsigned long   iSteamID;           
            char            szFriendsName[128];
            bool            FakePlayer;
            bool            IsHLTV;
            unsigned int    CustomFiles[4];
            unsigned char   FilesDownloaded;
        } player_info_t;

        class engine_client {
        public:
            virtual std::int32_t          GetIntersectingSurfaces(const model_t* model, const sdk::math::vector_3d& vCenter, const float radius, const bool bOnlyVisibleSurfaces, surfinfo* pInfos, const std::int32_t nMaxInfos) = 0;
            virtual sdk::math::vector_3d  GetLightForPoint(const sdk::math::vector_3d& pos, bool bClamp) = 0;
            virtual imaterial*            TraceLineMaterialAndLighting(const sdk::math::vector_3d& start, const sdk::math::vector_3d& end, sdk::math::vector_3d& diffuseLightColor, sdk::math::vector_3d& baseColor) = 0;
            virtual const char*           ParseCFile(const char* data, char* token, std::int32_t maxlen) = 0;
            virtual bool                  CopyCFile(const char* source, const char* destination) = 0;
            virtual void                  GetScreenSize(std::int32_t& width, std::int32_t& height) = 0;
            virtual void                  ServerCmd(const char* szCmdString, bool bReliable = true) = 0;
            virtual void                  ClientCmd(const char* szCmdString) = 0;
            virtual bool                  GetPlayerInfo(std::int32_t ent_num, player_info_t* pinfo) = 0;
            virtual std::int32_t          GetPlayerForUserID(std::int32_t userID) = 0;
            virtual client_textmessage_t* TextMessageGet(const char* pName) = 0;
            virtual bool                  ConIsVisible(void) = 0;
            virtual std::int32_t          GetLocalPlayer(void) = 0;
            virtual const model_t*        LoadModel(const char* pName, bool bProp = false) = 0;
            virtual float                 GetLastTimeStamp(void) = 0;
            virtual csentence*            GetSentence(caudiosource* pAudioSource) = 0;
            virtual float                 GetSentenceLength(caudiosource* pAudioSource) = 0;
            virtual bool                  IsStreaming(caudiosource* pAudioSource) const = 0;
            virtual void                  GetViewAngles(sdk::math::vector_3d& va) = 0;
            virtual void                  SetViewAngles(sdk::math::vector_3d& va) = 0;
            virtual std::int32_t          GetMaxClients(void) = 0;
            virtual const char*           KeyLookupBinding(const char* pBinding) = 0;
            virtual const char*           KeyBindingForKey(std::int32_t& code) = 0;
            virtual void                  KeySetBinding(std::int32_t, char const*) = 0;
            virtual void                  StartKeyTrapMode(void) = 0;
            virtual bool                  CheckDoneKeyTrapping(std::int32_t& code) = 0;
            virtual bool                  IsInGame(void) = 0;
            virtual bool                  IsConnected(void) = 0;
            virtual bool                  IsDrawingLoadingImage(void) = 0;
            virtual void                  HideLoadingPlaque(void) = 0;
            virtual void                  ConNPrintf(std::int32_t pos, const char* fmt, ...) = 0;
            virtual void                  ConNXPrintf(const struct con_nprint_s* info, const char* fmt, ...) = 0;
            virtual std::int32_t          IsBoxVisible(const sdk::math::vector_3d& mins, const sdk::math::vector_3d& maxs) = 0;
            virtual std::int32_t          IsBoxInViewCluster(const sdk::math::vector_3d& mins, const sdk::math::vector_3d& maxs) = 0;
            virtual bool                  CullBox(const sdk::math::vector_3d& mins, const sdk::math::vector_3d& maxs) = 0;
            virtual void                  SoundExtraUpdate(void) = 0;
            virtual const char*           GetGameDirectory(void) = 0;
            virtual const vmatrix&        WorldToScreenMatrix() = 0;
            virtual const vmatrix&        WorldToViewMatrix() = 0;
            virtual std::int32_t          GameLumpVersion(std::int32_t lumpId) const = 0;
            virtual std::int32_t          GameLumpSize(std::int32_t lumpId) const = 0;
            virtual bool                  LoadGameLump(std::int32_t lumpId, void* pBuffer, std::int32_t size) = 0;
            virtual std::int32_t          LevelLeafCount() const = 0;
            virtual ispatialquery*        GetBSPTreeQuery() = 0;
            virtual void                  LinearToGamma(float* linear, float* gamma) = 0;
            virtual float                 LightStyleValue(std::int32_t style) = 0; 
            virtual void                  ComputeDynamicLighting(const sdk::math::vector_3d& pt, const sdk::math::vector_3d* pNormal, sdk::math::vector_3d& color) = 0;
            virtual void                  GetAmbientLightColor(sdk::math::vector_3d& color) = 0;
            virtual std::int32_t          GetDXSupportLevel() = 0;
            virtual bool                  SupportsHDR() = 0;
            virtual void                  MatStub(imaterialsystem* pMatSys) = 0;
            virtual void                  GetChapterName(char* pchBuff, std::int32_t iMaxLength) = 0;
            virtual char const*           GetLevelName(void) = 0;
            virtual char const*           GetLevelNameShort(void) = 0;
            virtual char const*           GetMapGroupName(void) = 0;
            virtual struct IVoiceTweak_s* GetVoiceTweakAPI(void) = 0;
            virtual void                  SetVoiceCasterID(std::uint32_t someint) = 0; 
            virtual void                  EngineStatsBeginFrame(void) = 0;
            virtual void                  EngineStatsEndFrame(void) = 0;
            virtual void                  FireEvents() = 0;
            virtual std::int32_t          GetLeavesArea(unsigned short* pLeaves, std::int32_t nLeaves) = 0;
            virtual bool                  DoesBoxTouchAreaFrustum(const sdk::math::vector_3d& mins, const sdk::math::vector_3d& maxs, std::int32_t iArea) = 0; 
            virtual std::int32_t          GetFrustumList(frustum_t** pList, std::int32_t listMax) = 0;
            virtual bool                  ShouldUseAreaFrustum(std::int32_t i) = 0;
            virtual void                  SetAudioState(const audiostate_t& state) = 0;
            virtual std::int32_t          SentenceGroupPick(std::int32_t groupIndex, char* name, std::int32_t nameBufLen) = 0;
            virtual std::int32_t          SentenceGroupPickSequential(std::int32_t groupIndex, char* name, std::int32_t nameBufLen, std::int32_t sentenceIndex, std::int32_t reset) = 0;
            virtual std::int32_t          SentenceIndexFromName(const char* pSentenceName) = 0;
            virtual const char*           SentenceNameFromIndex(std::int32_t sentenceIndex) = 0;
            virtual std::int32_t          SentenceGroupIndexFromName(const char* pGroupName) = 0;
            virtual const char*           SentenceGroupNameFromIndex(std::int32_t groupIndex) = 0;
            virtual float                 SentenceLength(std::int32_t sentenceIndex) = 0;
            virtual void                  ComputeLighting(const sdk::math::vector_3d& pt, const sdk::math::vector_3d* pNormal, bool bClamp, sdk::math::vector_3d& color, sdk::math::vector_3d* pBoxColors = NULL) = 0;
            virtual void                  ActivateOccluder(std::int32_t nOccluderIndex, bool bActive) = 0;
            virtual bool                  IsOccluded(const sdk::math::vector_3d& vecAbsMins, const sdk::math::vector_3d& vecAbsMaxs) = 0; 
            virtual std::int32_t          GetOcclusionViewId(void) = 0;
            virtual void*                 SaveAllocMemory(size_t num, size_t size) = 0;
            virtual void                  SaveFreeMemory(void* pSaveMem) = 0;
            virtual inetchannelinfo*      GetNetChannelInfo(void) = 0;
            virtual void                  DebugDrawPhysCollide(const cphyscollide* pCollide, imaterial* pMaterial, const matrix3x4_t& transform, const uint8_t* color) = 0; 
            virtual void                  CheckPoint(const char* pName) = 0; 
            virtual void                  DrawPortals() = 0;
            virtual bool                  IsPlayingDemo(void) = 0;
            virtual bool                  IsRecordingDemo(void) = 0;
            virtual bool                  IsPlayingTimeDemo(void) = 0;
            virtual std::int32_t          GetDemoRecordingTick(void) = 0;
            virtual std::int32_t          GetDemoPlaybackTick(void) = 0;
            virtual std::int32_t          GetDemoPlaybackStartTick(void) = 0;
            virtual float                 GetDemoPlaybackTimeScale(void) = 0;
            virtual std::int32_t          GetDemoPlaybackTotalTicks(void) = 0;
            virtual bool                  IsPaused(void) = 0; 
            virtual float                 GetTimescale(void) const = 0;
            virtual bool                  IsTakingScreenshot(void) = 0;
            virtual bool                  IsHLTV(void) = 0;
            virtual bool                  IsLevelMainMenuBackground(void) = 0;
            virtual void                  GetMainMenuBackgroundName(char* dest, std::int32_t destlen) = 0;
            virtual void                  SetOcclusionParameters(const std::int32_t& params) = 0; 
            virtual void                  GetUILanguage(char* dest, std::int32_t destlen) = 0;
            virtual std::int32_t          IsSkyboxVisibleFromPoint(const sdk::math::vector_3d& vecPoint) = 0;
            virtual const char*           GetMapEntitiesString() = 0;
            virtual bool                  IsInEditMode(void) = 0; 
            virtual float                 GetScreenAspectRatio(std::int32_t viewportWidth, std::int32_t viewportHeight) = 0;
            virtual bool                  REMOVEDSteamRefreshLogin(const char* password, bool isSecure) = 0;
            virtual bool                  REMOVEDSteamProcessCall(bool& finished) = 0;
            virtual std::uint32_t         GetEngineBuildNumber() = 0;
            virtual const char*           GetProductVersionString() = 0; 
            virtual void                  GrabPreColorCorrectedFrame(std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) = 0;
            virtual bool                  IsHammerRunning() const = 0;
            virtual void                  ExecuteClientCmd(const char* szCmdString) = 0;
            virtual bool                  MapHasHDRLighting(void) = 0;
            virtual bool                  MapHasLightMapAlphaData(void) = 0;
            virtual std::int32_t          GetAppID() = 0;
            virtual sdk::math::vector_3d  GetLightForPointFast(const sdk::math::vector_3d& pos, bool bClamp) = 0;
            virtual void                  ClientCmdUnrestricted(char  const*, std::int32_t, bool) = 0;
            virtual void                  ClientCmdUnrestricted(const char* szCmdString) = 0;
            virtual void                  SetRestrictServerCommands(bool bRestrict) = 0;
            virtual void                  SetRestrictClientCommands(bool bRestrict) = 0;
            virtual void                  SetOverlayBindProxy(std::int32_t iOverlayID, void* pBindProxy) = 0;
            virtual bool                  CopyFrameBufferToMaterial(const char* pMaterialName) = 0;
            virtual void                  ReadConfiguration(const std::int32_t iController, const bool readDefault) = 0;
            virtual void                  SetAchievementMgr(iachievementmgr* pAchievementMgr) = 0;
            virtual iachievementmgr*      GetAchievementMgr() = 0;
            virtual bool                  MapLoadFailed(void) = 0;
            virtual void                  SetMapLoadFailed(bool bState) = 0;
            virtual bool                  IsLowViolence() = 0;
            virtual const char*           GetMostRecentSaveGame(void) = 0;
            virtual void                  SetMostRecentSaveGame(const char* lpszFilename) = 0;
            virtual void                  StartXboxExitingProcess() = 0;
            virtual bool                  IsSaveInProgress() = 0;
            virtual bool                  IsAutoSaveDangerousInProgress(void) = 0;
            virtual std::uint32_t         OnStorageDeviceAttached(std::int32_t iController) = 0;
            virtual void                  OnStorageDeviceDetached(std::int32_t iController) = 0;
            virtual char* const           GetSaveDirName(void) = 0;
            virtual void                  WriteScreenshot(const char* pFilename) = 0;
            virtual void                  ResetDemoInterpolation(void) = 0;
            virtual std::int32_t          GetActiveSplitScreenPlayerSlot() = 0;
            virtual std::int32_t          SetActiveSplitScreenPlayerSlot(std::int32_t slot) = 0;
            virtual bool                  SetLocalPlayerIsResolvable(char const* pchContext, std::int32_t nLine, bool bResolvable) = 0;
            virtual bool                  IsLocalPlayerResolvable() = 0;
            virtual std::int32_t          GetSplitScreenPlayer(std::int32_t nSlot) = 0;
            virtual bool                  IsSplitScreenActive() = 0;
            virtual bool                  IsValidSplitScreenSlot(std::int32_t nSlot) = 0;
            virtual std::int32_t          FirstValidSplitScreenSlot() = 0;
            virtual std::int32_t          NextValidSplitScreenSlot(std::int32_t nPreviousSlot) = 0;
            virtual ispsharedmemory*      GetSinglePlayerSharedMemorySpace(const char* szName, std::int32_t ent_num = (1 << 11)) = 0;
            virtual void                  ComputeLightingCube(const sdk::math::vector_3d& pt, bool bClamp, sdk::math::vector_3d* pBoxColors) = 0;
            virtual void                  RegisterDemoCustomDataCallback(const char* szCallbackSaveID, pfndemocustomdatacallback pCallback) = 0;
            virtual void                  RecordDemoCustomData(pfndemocustomdatacallback pCallback, const void* pData, size_t iDataLength) = 0;
            virtual void                  SetPitchScale(float flPitchScale) = 0;
            virtual float                 GetPitchScale(void) = 0;
            virtual bool                  LoadFilmmaker() = 0;
            virtual void                  UnloadFilmmaker() = 0;
            virtual void                  SetLeafFlag(std::int32_t nLeafIndex, std::int32_t nFlagBits) = 0;
            virtual void                  RecalculateBSPLeafFlags(void) = 0;
            virtual bool                  DSPGetCurrentDASRoomNew(void) = 0;
            virtual bool                  DSPGetCurrentDASRoomChanged(void) = 0;
            virtual bool                  DSPGetCurrentDASRoomSkyAbove(void) = 0;
            virtual float                 DSPGetCurrentDASRoomSkyPercent(void) = 0;
            virtual void                  SetMixGroupOfCurrentMixer(const char* szgroupname, const char* szparam, float val, std::int32_t setMixerType) = 0;
            virtual std::int32_t          GetMixLayerIndex(const char* szmixlayername) = 0;
            virtual void                  SetMixLayerLevel(std::int32_t index, float level) = 0;
            virtual std::int32_t          GetMixGroupIndex(char  const* groupname) = 0;
            virtual void                  SetMixLayerTriggerFactor(std::int32_t i1, std::int32_t i2, float fl) = 0;
            virtual void                  SetMixLayerTriggerFactor(char  const* char1, char  const* char2, float fl) = 0;
            virtual bool                  IsCreatingReslist() = 0;
            virtual bool                  IsCreatingXboxReslist() = 0;
            virtual void                  SetTimescale(float flTimescale) = 0;
            virtual void                  SetGamestatsData(cgamestatsdata* pGamestatsData) = 0;
            virtual cgamestatsdata*       GetGamestatsData() = 0;
            virtual void                  GetMouseDelta(std::int32_t& dx, std::int32_t& dy, bool b) = 0;
            virtual const char*           KeyLookupBindingEx(const char* pBinding, std::int32_t iUserId = -1, std::int32_t iStartCount = 0, std::int32_t iAllowJoystick = -1) = 0;
            virtual std::int32_t          KeyCodeForBinding(char  const*, std::int32_t, std::int32_t, std::int32_t) = 0;
            virtual void                  UpdateDAndELights(void) = 0;
            virtual std::int32_t          GetBugSubmissionCount() const = 0;
            virtual void                  ClearBugSubmissionCount() = 0;
            virtual bool                  DoesLevelContainWater() const = 0;
            virtual float                 GetServerSimulationFrameTime() const = 0;
            virtual void                  SolidMoved(base_general* pSolidEnt, collideable* pSolidCollide, const sdk::math::vector_3d* pPrevAbsOrigin, bool accurateBboxTriggerChecks) = 0;
            virtual void                  TriggerMoved(base_general* pTriggerEnt, bool accurateBboxTriggerChecks) = 0;
            virtual void                  ComputeLeavesConnected(const sdk::math::vector_3d& vecOrigin, std::int32_t nCount, const std::int32_t* pLeafIndices, bool* pIsConnected) = 0;
            virtual bool                  IsInCommentaryMode(void) = 0;
            virtual void                  SetBlurFade(float amount) = 0;
            virtual bool                  IsTransitioningToLoad() = 0;
            virtual void                  SearchPathsChangedAfterInstall() = 0;
            virtual void                  ConfigureSystemLevel(std::int32_t nCPULevel, std::int32_t nGPULevel) = 0;
            virtual void                  SetConnectionPassword(char const* pchCurrentPW) = 0;
            virtual csteamapicontext*     GetSteamAPIContext() = 0;
            virtual void                  SubmitStatRecord(char const* szMapName, std::uint32_t uiBlobVersion, std::uint32_t uiBlobSize, const void* pvBlob) = 0;
            virtual void                  ServerCmdKeyValues(keyvalues* pKeyValues) = 0;
            virtual void                  SpherePaintSurface(const model_t* model, const sdk::math::vector_3d& location, unsigned char chr, float fl1, float fl2) = 0;
            virtual bool                  HasPaintmap(void) = 0;
            virtual void                  EnablePaintmapRender() = 0;
            virtual void                  SphereTracePaintSurface(const model_t* model, const sdk::math::vector_3d& position, const sdk::math::vector_3d& vec2, float radius, std::int32_t& utilVecShit) = 0;
            virtual void                  RemoveAllPaint() = 0;
            virtual void                  PaintAllSurfaces(unsigned char uchr) = 0;
            virtual void                  RemovePaint(const model_t* model) = 0;
            virtual bool                  IsActiveApp() = 0;
            virtual bool                  IsClientLocalToActiveServer() = 0;
            virtual void                  TickProgressBar() = 0;
            virtual inputcontexthandle_t  GetInputContext(std::int32_t id) = 0;
            virtual void                  GetStartupImage(char* filename, std::int32_t size) = 0;
            virtual bool                  IsUsingLocalNetworkBackdoor(void) = 0;
            virtual void                  SaveGame(const char*, bool, char*, std::int32_t, char*, std::int32_t) = 0;
            virtual void                  GetGenericMemoryStats(void**) = 0;
            virtual bool                  GameHasShutdownAndFlushedMemory(void) = 0;
            virtual std::int32_t          GetLastAcknowledgedCommand(void) = 0;
            virtual void                  FinishContainerWrites(std::int32_t i) = 0;
            virtual void                  FinishAsyncSave(void) = 0;
            virtual std::int32_t          GetServerTick(void) = 0;
            virtual const char*           GetModDirectory(void) = 0;
            virtual bool                  AudioLanguageChanged(void) = 0;
            virtual bool                  IsAutoSaveInProgress(void) = 0;
            virtual void                  StartLoadingScreenForCommand(const char* command) = 0;
            virtual void                  StartLoadingScreenForKeyValues(keyvalues* values) = 0;
            virtual void                  SOSSetOpvarFloat(const char*, float) = 0;
            virtual void                  SOSGetOpvarFloat(const char*, float&) = 0;
            virtual bool                  IsSubscribedMap(const char*, bool) = 0;
            virtual bool                  IsFeaturedMap(const char*, bool) = 0;
            virtual void                  GetDemoPlaybackParameters(void) = 0;
            virtual std::int32_t          GetClientVersion(void) = 0;
            virtual bool                  IsDemoSkipping(void) = 0;
            virtual void                  SetDemoImportantEventData(const keyvalues* values) = 0;
            virtual void                  ClearEvents(void) = 0;
            virtual std::int32_t          GetSafeZoneXMin(void) = 0;
            virtual bool                  IsVoiceRecording(void) = 0;
            virtual void                  ForceVoiceRecordOn(void) = 0;
            virtual bool                  IsReplay(void) = 0;
        };
    };
};
